{"version":3,"sources":["components/User.js","components/TodoItem.js","components/TodoList.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["User","props","name","email","react_default","a","createElement","href","concat","TodoItem","title","user","User_User","TodoList","todos","cellSpacing","map","todo","TodoItem_TodoItem","Object","assign","key","id","Search","search","value","Fragment","type","onChange","BASE_URL","App","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","makeRequest","handleTODOsLoad","handleUsersLoad","xhr","setState","prevState","JSON","parse","responseText","isTODOSLoaded","loadingCount","users","isUsersLoaded","checkData","event","searchBy","target","filteredTodosWithUsers","todosWithUsers","filter","includes","state","inherits","createClass","url","cb","XMLHttpRequest","open","addEventListener","send","_this$state","usersMap","reduce","acc","objectSpread","defineProperty","userId","_this$state2","isLoaded","isLoading","button","disabled","onClick","Search_Search","TodoList_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4ef0799.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const User = props => {\r\n    const {\r\n        name,\r\n        email,\r\n    } = props;\r\n    \r\n    return (\r\n        <a href={`mailto:${email}`}>\r\n            {name}\r\n        </a>\r\n    );\r\n};","import React from 'react';\r\nimport { User } from './User';\r\n\r\nexport const TodoItem = props => {\r\n    const {\r\n        title,\r\n        //completed,\r\n        user,\r\n    } = props;\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <h3>{title}</h3>\r\n            </td>\r\n            <td>\r\n            <User {... user}/>\r\n            </td>\r\n        </tr>\r\n        \r\n    );\r\n};","import React from 'react';\r\nimport { TodoItem } from './TodoItem';\r\n\r\nexport const TodoList = props => {\r\n    const {\r\n        todos\r\n    } = props;\r\n    // console.log(users);\r\n    // const usersMap = users.reduce((acc, user) => ({...acc, [user.id]: user}), {});\r\n    // console.log(usersMap);\r\n    // const todosWithUsers = todos.map(todo => ({...todo, user: usersMap[todo.userId]}));\r\n    // console.log(todosWithUsers);\r\n    return (\r\n        <table cellSpacing={20}>\r\n            <tbody>\r\n                {todos.map(todo => {\r\n                    return (\r\n                        <TodoItem key={todo.id} {...todo}/>\r\n    );\r\n})}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};","import React from 'react'\r\n\r\nexport const Search = props => {\r\n    const { search, value } = props;\r\n    return (\r\n        <>\r\n            <input type=\"text\" onChange={search} value={value}/>\r\n        </>\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { TodoList } from './components/TodoList';\nimport { Search } from './components/Search';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: null,\n      users: null,\n      isTODOSLoaded: false,\n      isUsersLoaded: false,\n      loadingCount: 0,\n      todosWithUsers: null,\n      filteredTodosWithUsers: null,\n      searchBy: ''\n    };\n  }\n\n  loadData = () => {\n    this.makeRequest(`${BASE_URL}/todos`, this.handleTODOsLoad);\n    this.makeRequest(`${BASE_URL}/users`, this.handleUsersLoad);\n  };\n\n  handleTODOsLoad = xhr => () => {\n    this.setState(prevState => ({\n      todos: JSON.parse(xhr.responseText),\n      isTODOSLoaded: true,\n      loadingCount: prevState.loadingCount - 1,\n    }));\n  };\n\n  handleUsersLoad = xhr => () => {\n    this.setState(\n      prevState => ({\n        users: JSON.parse(xhr.responseText),\n        isUsersLoaded: true,\n        loadingCount: prevState.loadingCount - 1,\n      }),\n      this.checkData\n    );\n  };\n\n  makeRequest(url, cb) {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.addEventListener('load', cb(xhr));\n    xhr.send();\n    this.setState(prevState => ({ loadingCount: prevState.loadingCount + 1 }));\n  }\n\n  search = (event) => {\n    const searchBy = event.target.value;\n\n    this.setState(prevState => {\n      const filteredTodosWithUsers = prevState.todosWithUsers.filter(todo => todo.title.includes(searchBy));\n      return {\n        searchBy,\n        filteredTodosWithUsers,\n      };\n    });\n  }\n\n  checkData() {\n    const { isTODOSLoaded, isUsersLoaded, users, todos } = this.state;\n    if (isTODOSLoaded && isUsersLoaded) {\n      const usersMap = users.reduce((acc, user) => ({ ...acc, [user.id]: user }), {});\n      const todosWithUsers = todos.map(todo => ({ ...todo, user: usersMap[todo.userId] }));\n      this.setState({\n        filteredTodosWithUsers: todosWithUsers,\n        todosWithUsers,\n      });\n    }\n\n  }\n\n  render() {\n    const {\n      isTODOSLoaded,\n      isUsersLoaded,\n      loadingCount,\n      filteredTodosWithUsers,\n      searchBy\n    } = this.state;\n\n    const isLoaded = isTODOSLoaded && isUsersLoaded && filteredTodosWithUsers !== null;\n    const isLoading = loadingCount !== 0;\n\n    const button = (\n      <button\n        type=\"button\"\n        disabled={isLoaded}\n        onClick={this.loadData}\n      >\n        {isLoading ? 'Loading...' : 'Load data'}\n      </button>\n    );\n\n    if (!isLoaded) {\n      return button;\n    }\n\n    return (\n      <>\n        <Search search={this.search} value={searchBy} />\n        {button}\n        <TodoList todos={filteredTodosWithUsers} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}